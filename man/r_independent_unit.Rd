% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simul.R
\name{r_independent_unit}
\alias{r_independent_unit}
\title{Simulate Independent-unit Framework}
\usage{
r_independent_unit(ns, ps = F, alfas = F, betas = F)
}
\arguments{
\item{ns}{A k-length \code{vector} containing the trial parameter for each
binomial distribution.}

\item{ps}{A k-length \code{vector} containing the probability
parameter for each binomial distribution.}

\item{alfas}{A k-length \code{vector} containing the alfa parameters for each
beta-binomial distribution. Alternatively a \code{numeric} showing the
alfa parameter for all beta-binomial distribution.}

\item{betas}{A k-length \code{vector} containing the beta parameters for each
beta-binomial distribution. Alternatively a \code{numeric} showing the
beta parameter for all beta-binomial distribution.}
}
\value{
A 2xk \code{matrix} containing the generated sample.
}
\description{
\code{r_independent_unit} samples from k independent multinomial
distributions or, following a simple Bayesian  conjugate model, k beta-
binomial distributions -- where k is the number of units in an environment.
Returns the sample in the form of a 2xk matrix. At least, one
among ps and both alfas and betas must be specified.
}
\details{
Simulate a sample from k independent distributions, one per unit. The
user can sample from independent binomial, or independent
beta-binomial. The kth binomial distributions will take as
probability vectors the kth element of ps. The kth beta-bininomial
distributions will take as alfa (beta) the kth element in alfas (betas) if
alfas is a \code{vector}. Otherwise all beta-binomial distributions will
have alfas (betas) as the alfa (beta) parameter, when alfas (betas) is
\code{numeric}.
In case ps is specified, alfas and betas will be ignored and
the units' composition will be sampled from binomial distributions.

At least, one among ps and both alphas and betas must be specified.
The length of ns and ps (or alphas and betas) must be identical.
}
\examples{
env <- matrix(c(1,2,3,4,5,6,7,8), nrow = 2, byrow = TRUE)
ns <- colSums(env)
ps <- env[1,]/ns
samp <- r_independent_unit(ns = ns, ps = ps)
alfas <- env[1,]
betas <- env[2,]
samp2 <- r_independent_unit(ns = ns, alfas = alfas, betas = betas)
alfas <- 2
betas <- 3
samp3 <- r_independent_unit(ns = ns, alfas = alfas, betas = betas)
all.equal(colSums(env), colSums(samp), colSums(samp2), colSums(samp3))
}
\seealso{
Other frameworks: 
\code{\link{r_full_multinomial}()},
\code{\link{r_independent_group}()}
}
\concept{frameworks}
